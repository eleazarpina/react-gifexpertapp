{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","onChange","target","value","placeholder","type","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","className","GifExpertApp","categories","i","key","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAqBlD,OACE,0BAAMC,SAba,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAUd,2BACEO,SArBoB,SAACL,GAEzBF,EAAcE,EAAEM,OAAOC,QAoBnBC,YAAY,YACZC,KAAK,OACLF,MAAUV,M,uBC9BLa,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAG0BC,UAAUH,GAHpC,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAItCa,QAAQC,IAAIR,GAhBS,kBAkBdA,GAlBc,4CAAH,sDCMPS,EAAU,SAAC,GAAoB,IAAjBjB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEhBf,mBAAS,CACjCsB,KAAM,GACNW,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KA2B1C,OAnBAC,qBAAU,WACRtB,EAASC,GACNsB,MAAK,SAAAC,GAEJH,EAAS,CACPb,KAAMgB,EACNL,SAAS,SAId,IASIC,EDvB0BK,CAAcxB,GAAjCa,EAH2B,EAGlCN,KAAeW,EAHmB,EAGnBA,QAetB,OAbAH,QAAQC,IAAIE,GAeV,oCACE,wBAAIO,UAAU,0CAA2CzB,GAIvDkB,GAAW,uBAAGO,UAAU,0CAAb,WAGb,yBAAKA,UAAU,aAEXZ,EAAOJ,KAAI,SAAEC,UEjCVgB,EAAe,WAAO,IAAD,EAEIzC,mBAAS,CAAC,kBAFd,mBAEzB0C,EAFyB,KAEb3C,EAFa,KAUhC,OACE,6BACE,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAKA,4BAEI2C,EAAWlB,KAAI,SAACT,EAAU4B,GACxB,OAAO,kBAAC,EAAD,CACHC,IAAO7B,EACPA,SAAaA,U,MCnB7B8B,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f568701e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    // console.log(e);\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(cats => [ inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n\r\n    \r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit = { handleSubmit }>\r\n      {/* <h1>{ inputValue }</h1> */}\r\n      <input \r\n        onChange = { handleInputChange }\r\n        placeholder=\"Categoria\" \r\n        type=\"text\"\r\n        value = { inputValue }        \r\n        >\r\n      </input>\r\n\r\n    </form>\r\n  )  \r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n","\r\nexport const getGifs = async (category) => {\r\n        \r\n  const url = \r\n      `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=LN1fsQJA0w2TVtMdV8E4oktlqI3s5tq2`;\r\n  \r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  });\r\n\r\n  console.log(gifs);\r\n  \r\n  return gifs;\r\n  \r\n};","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n  // const [images, setImages] = useState([]);\r\n  const {data : images, loading} = useFetchGifs( category );\r\n\r\n  console.log(loading);\r\n\r\n  // useEffect( () => {\r\n  //   getGifs(category)\r\n  //     // .then(imgs => setImages(imgs));\r\n  //     .then( setImages);\r\n  // }, [ category ]); \r\n\r\n  \r\n\r\n  \r\n  // getGifs();\r\n\r\n  return (\r\n\r\n    <>\r\n      <h3 className=\"card animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n      {/* { loading ? 'Cargando' : 'Data cargada' } */}\r\n\r\n      { loading && <p className=\"card animate__animated animate__fadeIn\">Loading</p>}\r\n\r\n\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(( img ) => \r\n          (\r\n            // <li key= { img.id }>\r\n            //   { img.title }\r\n            // </li> ooooo Destructurar el objecto\r\n            \r\n            <GifGridItem \r\n              key= { img.id }\r\n              { ...img } />\r\n              \r\n          ))\r\n        }\r\n        \r\n\r\n        {/* <h3>{ count }</h3>\r\n        <button onClick={ ()=> setCount( count + 1) }></button> */}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n\r\n  useEffect(() => {\r\n    getGifs( category )\r\n      .then(imgs => {\r\n      \r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n\r\n      });\r\n  }, []);\r\n\r\n  // setTimeout(()=> {\r\n  //   setState({\r\n  //     data: [1,2,3,4,5,6,7],\r\n  //     loading: false \r\n  //   })\r\n  // }, 3000);\r\n\r\n  return state; // { data:[], loading: true }\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One punch man']);\r\n  \r\n  // const handleAdd = () => {\r\n  //   const newCategory = 'HunterXHunter';\r\n  //   // setCategories( [...categories, newCategory]); // 1 forma\r\n  //   setCategories( cats => [ ...cats, newCategory ] );\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories = { setCategories }/>\r\n      <hr></hr>\r\n      \r\n\r\n      {/* <button onClick= { handleAdd }>Agregar</button> */}\r\n\r\n      <ol>\r\n        {\r\n          categories.map((category, i) => {\r\n            return <GifGrid \r\n                key = {category }\r\n                category = { category }\r\n              />;\r\n          })\r\n        }\r\n      </ol>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}